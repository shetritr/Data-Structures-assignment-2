
public class DataStructure implements DT {
	
	//////////////// DON'T DELETE THIS CONSTRUCTOR ////////////////
	public DataStructure()
	{
		first_x=null;
		first_y=null;
		max_x=null;
		min_x=null;
		max_y=null;
		min_y=null;
		size=0;
	}

	@Override
	public void addPoint(Point point) {//add point to the two lists
		Container temp=first_x;//to x list
		Container tempParallel;
		size++;
		if(temp==null||temp.getData().getX()>point.getX()){
			first_x=new Container(point, first_x, null);
			tempParallel=first_x;
		}
		else{ while(temp.getNext()!=null&&temp.getNext().getData().getX()<point.getX()){
			temp=temp.getNext();
		}
		temp.SetNext(new Container(point, temp.getNext(), temp));
		tempParallel=temp.getNext();
		}
		if(temp.getNext()==null){//defines min and max
			max_x=temp;
		}else if(temp.getPrev()==null)
			min_x=temp;
		
		temp=first_y;//to y list
		if(temp==null||temp.getNext().getData().getY()>point.getY()){
			first_y=new Container(point, first_y,null);
			first_y.SetParallel(tempParallel);
			tempParallel.SetParallel(first_y);
		}
		else{ 
			while(temp.getNext()!=null&&temp.getNext().getData().getY()<point.getY()){
			temp=temp.getNext();
			}
		temp.SetNext(new Container(point, temp.getNext(), temp));
		temp.SetParallel(tempParallel);
		tempParallel.SetParallel(temp);
		temp=temp.getNext();
		}
		if(temp.getNext()==null){//defines min and max
			max_y=temp;
		}else if(temp.getPrev()==null)
			min_y=temp;
			}

	@Override
	public Point[] getPointsInRangeRegAxis(int min, int max, Boolean axis) {//return the points between min and max 
	    int count=Count(axis, max, min);//get the number of points
	    Point [] Pointans=new Point[count];
	    if(axis){//if is the x axis
	    	Container temp=first_x;
	    	int i=0;
	    	while(temp!=null&&temp.getData().getX()<=max){
				if(temp.getData().getX()>=min){
					Pointans[i]=temp.getData();
					i++;
				}
				temp=temp.getNext();
			}
	    }
	    else{//y axis
	    	Container temp=first_y;
	    	int i=0;
	    	while(temp!=null&&temp.getData().getY()<=max){
				if(temp.getData().getY()>=min){
					Pointans[i]=temp.getData();
					i++;
				}
				temp=temp.getNext();
			}
	    }
		return Pointans;
	}

	@Override
	public Point[] getPointsInRangeOppAxis(int min, int max, Boolean axis) {//return the points between min and max on the !axis
		int Count = Count(axis, max, min);
		Point [] ans =new Point[Count];
		int i=0;
		if(axis){//y axis
			Container temp=first_y;
			while(temp!=null&i<ans.length){
				if(temp.getData().getX()<=max&temp.getData().getX()>=min){
					ans[i]=temp.getData();
					i++;
				}
				temp=temp.getNext();
			}
			
		}else{//x axis
			Container temp=first_x;
			while(temp!=null&i<ans.length){
				if(temp.getData().getY()<=max&temp.getData().getY()>=min){
					ans[i]=temp.getData();
					i++;
				}
				temp=temp.getNext();
			}
		}
		
		return ans;
	}

	@Override
	public double getDensity() {
		return size/((max_x.getData().getX()-min_x.getData().getX())*
				(max_y.getData().getY()-min_y.getData().getY()));
	}

	@Override
	public void narrowRange(int min, int max, Boolean axis) {
		if(axis){
			while(max_x!=null&&max_x.getData().getX()>max){
				size--;
				max_x=max_x.getPrev();
				if(max_x!=null){
					max_x.SetNext(null);
					if(max_x.getParallel().getNext()!=null){
						max_x.getParallel().getNext().SetPrev(max_x.getParallel().getPrev());
					}else{
						max_y=max_x.getParallel().getPrev();
						if(max_y!=null){
							max_y.SetNext(null);
						}
					}
					if(max_x.getParallel().getPrev()!=null){
						max_x.getParallel().getPrev().SetNext(max_x.getParallel().getNext());
					}else{
						min_y=max_x.getParallel().getNext();
						if(min_y!=null){
							min_y.SetPrev(null);
							first_y=min_y;
						}
					}
				}
			}
			while(min_x!=null&&min_x.getData().getX()<min){
				size--;
				min_x=min_x.getNext();
				if(min_x!=null){
					min_x.SetPrev(null);
					if(min_x.getParallel().getNext()!=null){
						min_x.getParallel().getNext().SetPrev(min_x.getParallel().getPrev());
					}else{
						max_y=min_x.getParallel().getPrev();
						if(max_y!=null){
							max_y.SetNext(null);
						}
					}
					if(min_x.getParallel().getPrev()!=null){
						min_x.getParallel().getPrev().SetNext(min_x.getParallel().getNext());
					}else{
						min_y=min_x.getParallel().getNext();
						if(min_y!=null){
							min_y.SetPrev(null);
							first_y=min_y;
						}
					}
				}
			}
		}else{
			while(max_y!=null&&max_y.getData().getX()>max){
				size--;
				max_y=max_y.getPrev();
				if(max_y!=null){
					max_y.SetNext(null);
					if(max_y.getParallel().getNext()!=null){
						max_y.getParallel().getNext().SetPrev(max_y.getParallel().getPrev());
					}else{
						max_x=max_y.getParallel().getPrev();
						if(max_x!=null){
							max_x.SetNext(null);
						}
					}
					if(max_y.getParallel().getPrev()!=null){
						max_y.getParallel().getPrev().SetNext(max_y.getParallel().getNext());
					}else{
						min_x=max_y.getParallel().getNext();
						if(min_x!=null){
							min_x.SetPrev(null);
							first_x=min_x;
						}
					}
				}
			}
			while(min_y!=null&&min_y.getData().getX()<min){
				size--;
				min_y=min_y.getNext();
				if(min_y!=null){
					min_y.SetPrev(null);
					if(min_y.getParallel().getNext()!=null){
						min_y.getParallel().getNext().SetPrev(min_y.getParallel().getPrev());
					}else{
						max_x=min_y.getParallel().getPrev();
						if(max_x!=null){
							max_x.SetNext(null);
						}
					}
					if(min_y.getParallel().getPrev()!=null){
						min_y.getParallel().getPrev().SetNext(min_y.getParallel().getNext());
					}else{
						min_x=min_y.getParallel().getNext();
						if(min_x!=null){
							min_x.SetPrev(null);
							first_x=min_x;
						}
					}
				}
			}
		}
		
	}

	@Override
	public Boolean getLargestAxis() {
		
		return (max_x.getData().getX()-min_x.getData().getX())>
		(max_y.getData().getY()-min_y.getData().getY());
	}

	@Override
	public Container getMedian(Boolean axis) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Point[] nearestPairInStrip(Container container, int width,
			Boolean axis) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Point[] nearestPair() {
		// TODO Auto-generated method stub
		return null;
	}
	private Container first_x;
	private Container max_x;
	private Container min_x;
	private Container first_y;
	private Container max_y;
	private Container min_y;
	private int size;
	private int Count(boolean axis,int max,int min){//count the number of points between the min & max
		int count=0;
		if(axis){
			Container temp=first_x;
			while(temp!=null&&temp.getData().getX()<=max){
				if(temp.getData().getX()>=min){
					count++;
				}
				temp=temp.getNext();
			}
		}else{
			Container temp=first_y;
			while(temp!=null&&temp.getData().getY()<=max){
				if(temp.getData().getY()>=min){
					count++;
				}
				temp=temp.getNext();
			}
		}
			
		return count;
	}
	//TODO: add members, methods, etc.
	
}

